package my.numberaddition;

import java.awt.event.*;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class NumberAdditionUI extends javax.swing.JFrame {
   /* TODO: Store original value for scale accuracy improvement
    * TODO: This would benefit scaling as the slider could be made
    * TODO: in a more natural way. */
   public int LOG_LINE_NUM = 0;
   /* Readability enhancers */
   private final int CUP = 1;
   private final int TSP = 2;
   private final int TBSP = 3;
   private final int QTS = 4;
   private final int GAL = 5;
   private final int PIN = 6;
   private final int MIL = 7;
   private final int LIT = 8;
   /* Conversion units */
   private final double CUP_TO_TSP     = 48.0;
   private final double CUP_TO_TBSP    = 16.0;
   private final double CUP_TO_QTS     = 0.25;
   private final double CUP_TO_PIN     = 0.5;
   private final double CUP_TO_GAL     = 0.0625;
   private final double CUP_TO_MIL     = 236.5882;
   private final double CUP_TO_LIT     = 0.2366;
   
   public NumberAdditionUI() {
      initComponents();
   }
   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPanel1 = new javax.swing.JPanel();
      qtsTextField = new javax.swing.JTextField();
      cupTextField = new javax.swing.JTextField();
      jLabel6 = new javax.swing.JLabel();
      pinTextField = new javax.swing.JTextField();
      jLabel1 = new javax.swing.JLabel();
      tbspTextField = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();
      milTextField = new javax.swing.JTextField();
      galTextField = new javax.swing.JTextField();
      jLabel8 = new javax.swing.JLabel();
      litTextField = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      tspTextField = new javax.swing.JTextField();
      jSeparator1 = new javax.swing.JSeparator();
      jPanel3 = new javax.swing.JPanel();
      scaleSlider = new javax.swing.JSlider();
      jLabel9 = new javax.swing.JLabel();
      jLabel10 = new javax.swing.JLabel();
      jPanel4 = new javax.swing.JPanel();
      jLabel12 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Volume"));

      qtsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            qtsTextFieldKeyPressed(evt);
         }
      });

      cupTextField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            cupTextFieldKeyPressed(evt);
         }
      });

      jLabel6.setText("Pint");

      pinTextField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            pinTextFieldKeyPressed(evt);
         }
      });

      jLabel1.setText("Cup");

      tbspTextField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            tbspTextFieldKeyPressed(evt);
         }
      });

      jLabel3.setText("Teaspoon");

      milTextField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            milTextFieldKeyPressed(evt);
         }
      });

      galTextField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            galTextFieldKeyPressed(evt);
         }
      });

      jLabel8.setText("Liter");

      litTextField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            litTextFieldKeyPressed(evt);
         }
      });

      jLabel4.setText("Gallon");

      jLabel2.setText("Tablespoon");

      jLabel7.setText("Milliliter");

      jLabel5.setText("Quart");

      tspTextField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            tspTextFieldKeyPressed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(tspTextField)
                     .addComponent(tbspTextField)
                     .addComponent(cupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(36, 36, 36)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel3)
                     .addComponent(jLabel1)
                     .addComponent(jLabel2)))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(qtsTextField)
                     .addComponent(galTextField, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(pinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(36, 36, 36)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel4)
                     .addComponent(jLabel5)
                     .addComponent(jLabel6)))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(milTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(36, 36, 36)
                  .addComponent(jLabel7))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(litTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(36, 36, 36)
                  .addComponent(jLabel8)))
            .addContainerGap())
         .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(tspTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(tbspTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(cupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(pinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel6))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(qtsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel5))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4)
               .addComponent(galTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(milTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel7))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(litTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel8))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Scale"));

      scaleSlider.setMajorTickSpacing(1);
      scaleSlider.setMaximum(7);
      scaleSlider.setMinimum(1);
      scaleSlider.setMinorTickSpacing(1);
      scaleSlider.setPaintTicks(true);
      scaleSlider.setSnapToTicks(true);

      jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/numberaddition/percent bar.png"))); // NOI18N

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jLabel9)
         .addComponent(scaleSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(scaleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel9))
      );

      scaleSlider.addChangeListener(new SliderListener());

      jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/numberaddition/common_conv.png"))); // NOI18N

      jLabel12.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
      jLabel12.setText("Split It!");

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jLabel12))
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jLabel12)
      );

      jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/numberaddition/graph2.png"))); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel10)))))
            .addContainerGap(29, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(15, 15, 15)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel11))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel10)
               .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void cupTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cupTextFieldKeyPressed
      textFieldKeyPressed(evt, CUP, cupTextField.getText());
   }//GEN-LAST:event_cupTextFieldKeyPressed
   private void tbspTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbspTextFieldKeyPressed
      textFieldKeyPressed(evt, TBSP, tbspTextField.getText());
   }//GEN-LAST:event_tbspTextFieldKeyPressed
   private void tspTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tspTextFieldKeyPressed
      textFieldKeyPressed(evt, TSP, tspTextField.getText());
   }//GEN-LAST:event_tspTextFieldKeyPressed
   private void pinTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pinTextFieldKeyPressed
      textFieldKeyPressed(evt, PIN, pinTextField.getText());
   }//GEN-LAST:event_pinTextFieldKeyPressed
   private void galTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_galTextFieldKeyPressed
      textFieldKeyPressed(evt, GAL, galTextField.getText());
   }//GEN-LAST:event_galTextFieldKeyPressed
   private void qtsTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtsTextFieldKeyPressed
      textFieldKeyPressed(evt, QTS, qtsTextField.getText());
   }//GEN-LAST:event_qtsTextFieldKeyPressed
   private void milTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_milTextFieldKeyPressed
      textFieldKeyPressed(evt, MIL, milTextField.getText());
   }//GEN-LAST:event_milTextFieldKeyPressed
   private void litTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_litTextFieldKeyPressed
      textFieldKeyPressed(evt, LIT, litTextField.getText());
   }//GEN-LAST:event_litTextFieldKeyPressed
   private void textFieldKeyPressed(java.awt.event.KeyEvent evt, int source, String textField) {
      US_VOL output;
      if((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9')) {         
         output = conversion(Double.parseDouble(textField + evt.getKeyChar()), source);
         setConvertVal(source, output);
      } else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {         
         if(".".equals(textField.substring(0, 1))) {
            if(textField.length() > 2)
               output = conversion(Double.parseDouble(textField.substring(0, textField.length() - 1)), source);
            else
               output = conversion(0.0, source);
         } else {
            // Does not begin with a period.
            if(textField.length() > 1) {
               output = conversion(Double.parseDouble(textField.substring(0, textField.length() - 1)), source);
            } else {
               output = conversion(0.0, source);
            }
         }
         setConvertVal(source, output);
      } else {
         // Throw error about a wrong key pressed...or something, idk - (includes periods)
         log(evt.getKeyCode() + " : " + evt.getKeyChar());
      }
   }
   
   class SliderListener implements ChangeListener {
      @Override
      public void stateChanged(ChangeEvent e) {
         JSlider source = (JSlider)e.getSource();
         if (!source.getValueIsAdjusting()) {
            int val = (int)source.getValue();
            scaleValues(val);
         }
      }
   }
   public class US_VOL {
      // TODO: Make this a collection?
      double cup; // Conversion unit
      double tsp;
      double tbsp;      
      double qts;
      double gal;      
      double pin;
      double lit;
      double mil;
      int source;
      public US_VOL(double cup, int source) {
         // Convert cup from whatever source it is into a cup...[continued below]
         switch(source) {
            case CUP:   this.cup = cup;
                        break;
            case TSP:   this.cup = cup / CUP_TO_TSP;
                        break;
           case TBSP:   this.cup = cup / CUP_TO_TBSP;
                        break;
            case QTS:   this.cup = cup / CUP_TO_QTS;
                        break;
            case GAL:   this.cup = cup / CUP_TO_GAL;
                        break;
            case PIN:   this.cup = cup / CUP_TO_PIN;
                        break;
            case MIL:   this.cup = cup / CUP_TO_MIL;
                        break;
            case LIT:   this.cup = cup / CUP_TO_LIT;
                        break;
            default:   this.cup = cup;
                        break;
         }
         log(this.cup);
         // ...then convert from cup to all other units.
         this.tsp = CUP_TO_TSP * this.cup;
         this.tbsp = CUP_TO_TBSP * this.cup;
         this.qts = CUP_TO_QTS * this.cup;
         this.gal = CUP_TO_GAL * this.cup;
         this.pin = CUP_TO_PIN * this.cup;
         this.mil = CUP_TO_MIL * this.cup;
         this.lit = CUP_TO_LIT * this.cup;
      }
      public double getCup() {
         return cup;
      }
      public void setCup(double cup) {
         this.cup = cup;
      }
      public double getTsp() {
         return tsp;
      }
      public void setTsp(double tsp) {
         this.tsp = tsp;
      }
      public double getTbsp() {
         return tbsp;
      }
      public void setTbsp(double tbsp) {
         this.tbsp = tbsp;
      }
      public double getQts() {
         return qts;
      }
      public void setQts(double qts) {
         this.qts = qts;
      }
      public double getGal() {
         return gal;
      }
      public void setGal(double gal) {
         this.gal = gal;
      }
      public double getPin() {
         return pin;
      }
      public void setPin(double pin) {
         this.pin = pin;
      }
      public double getLit() {
         return lit;
      }
      public void setLit(double lit) {
         this.lit = lit;
      }
      public double getMil() {
         return mil;
      }
      public void setMil(double mil) {
         this.mil = mil;
      }
   }
   public class ROUND {
      int input;
      int output = 1;
      int scale = 125; // 1000 % scale must equal 0
      public ROUND(String input) {
         log("We're in: " + input);
         if(1000 % scale != 0) log("scale isn't properly set");
         
         while(input.length() < 3) input = input + '0';
         while(input.length() > 3) input = input.substring(0, 3);
         log("Inter: " + input);
         
         int previous = 0;
         int intInput = Integer.parseInt(input);
         for(int i = scale; i <= 1000; i += scale ) {
            if(intInput > previous && intInput <= i) {
               if(intInput*2 <= i) {
                  // Round down
                  output = previous;
               } else {
                  // Round up
                  output = i;
               }               
            }
            previous = i;
         }
      }
      public int getInput() {
         return input;
      }
      public void setInput(int input) {
         this.input = input;
      }
      public int getOutput() {
         return output;
      }
      public void setOutput(int output) {
         this.output = output;
      }
   }
   private void scaleValues(int value) {
      double scaleBy = 1.0;
      switch(value) {
         case 1:  scaleBy = 1.0 / 8.0;
                  break;
         case 2:  scaleBy = 1.0 / 4.0;
                  break;
         case 3:  scaleBy = 1.0 / 3.0;
                  break;
         case 4:  scaleBy = 1.0 / 2.0;
                  break;
         case 5:  scaleBy = 2.0 / 3.0;
                  break;
         case 6:  scaleBy = 3.0 / 4.0;
                  break;
        default:  scaleBy = 1.0;
                  break;
      }
      scaleSlider.setValue(7);
      setConvertVal(0, new US_VOL(Double.parseDouble(cupTextField.getText()) * scaleBy, 0));
   }
   private void setConvertVal(int source, US_VOL vol) {
      // TODO: Reduce IFs if possible
      if(source != CUP)
         cupTextField.setText(makeReadable(vol.getCup()));
      if(source != TSP)
         tspTextField.setText(makeReadable(vol.getTsp()));
      if(source != TBSP)
         tbspTextField.setText(makeReadable(vol.getTbsp()));
      if(source != QTS)
         qtsTextField.setText(makeReadable(vol.getQts()));
      if(source != GAL)
         galTextField.setText(makeReadable(vol.getGal()));
      if(source != PIN)
         pinTextField.setText(makeReadable(vol.getPin()));
      if(source != MIL)
         milTextField.setText(makeReadable(vol.getMil()));
      if(source != LIT)
         litTextField.setText(makeReadable(vol.getLit()));
   }
   private void log(Object...args) {
      // WARNING: I'm not sure what will be inside Object at any given time.
      LOG_LINE_NUM++;
      System.out.println("L#" + LOG_LINE_NUM + ": " + args[0]);
   }
   private US_VOL conversion(double d, int source) {
      // Convert from source unit to all other units
      // Not sure this method is beneficial
      US_VOL volumes = new US_VOL(d, source);
      return volumes;
   }
   private String makeReadable(double d) {
      String preparedString;     
      if(d > 100) {
         preparedString = "Many";
      } else if(Double.toString(d).indexOf('.') != -1) {
         // Has decimal place
         log("Has decimal brask: " + d);
         preparedString = Double.toString(d);
         int integerPlaces = preparedString.indexOf('.');
         int decimalPlaces = preparedString.length() - integerPlaces;
         
         if(d % 1.0 == 0) { // Whole number            
            preparedString = preparedString.substring(0, preparedString.length() - 1);
            decimalPlaces = 0;
         } else {
            int roundedInt = new ROUND(preparedString.substring(integerPlaces + 1)).getOutput();
            if(roundedInt == 1) {
               integerPlaces = Integer.parseInt(preparedString.substring(0, integerPlaces)) + 1;
               preparedString = Integer.toString(integerPlaces);
            } else {
               integerPlaces = Integer.parseInt(preparedString.substring(0, integerPlaces));
               preparedString = (Integer.toString(integerPlaces) + '.' + Integer.toString(roundedInt));
            }            
         }
      } else {
         preparedString = String.valueOf(d);
      }      
      /* Remove trailing zeros and periods */
      while("0".equals(preparedString.substring(preparedString.length() - 1)))
         preparedString = preparedString.substring(0, preparedString.length() - 1);
      if(".".equals(preparedString.substring(preparedString.length() - 1)))
         preparedString = preparedString.substring(0, preparedString.length() - 1);
      if("0".equals(preparedString)) preparedString = "Tiny";
      
      return preparedString;
   }
   /* I don't believe this is being used
    * private String findNearest(String str, int intPlaces, int decPlaces) {
    * String ints = str.substring(0, intPlaces);
    * String decimals = str.substring(intPlaces + 1);
    * log("Ints:\t" + ints + "\tDec:\t" + decimals);
    * return str;
    * }*/

   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(NumberAdditionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(NumberAdditionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(NumberAdditionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(NumberAdditionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new NumberAdditionUI().setVisible(true);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField cupTextField;
   private javax.swing.JTextField galTextField;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField litTextField;
   private javax.swing.JTextField milTextField;
   private javax.swing.JTextField pinTextField;
   private javax.swing.JTextField qtsTextField;
   private javax.swing.JSlider scaleSlider;
   private javax.swing.JTextField tbspTextField;
   private javax.swing.JTextField tspTextField;
   // End of variables declaration//GEN-END:variables
   
}